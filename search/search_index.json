{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Home \u00b6 InterfaceService is a stand-alone ModuleScript that helps you script interactions with GUI Instances in a better, more efficient way! You can detect an interaction (such as left click) on multiple GUI Instances which is achievable without InterfaceService but it requires you to write out a for loop for every GUI Interaction you want, and if your script creates a new GUI Instance after the for loop then the Instance would be omitted from the loop as it did not exist at the time the loop was executed. InterfaceService aims to solve these problems. Example \u00b6 local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- function that fires whenever a GUI Instance with the ClassName of \"TextButton\" is left clicked local leftClick = interfaceService : Get ( \".TextButton\" ): LeftClick ( function ( this ) print ( this . Name .. \" was clicked!\" ) end ) -- creates a new TextButton newButton = interfaceService : Create ({ ClassName = \"TextButton\" , Size = UDim2 . new ( 0 , 100 , 0 , 100 ), Position = UDim2 . new ( 0.5 , 0 , 0.5 , 0 ), AnchorPoint = Vector2 . new ( 0.5 , 0.5 ), Parent = script . Parent }) -- has to update the leftClick function so \"newButton\" can be detected leftClick : Update () Setup \u00b6 Add the ModuleScript to your Roblox inventory by clicking on the link here . Go into Roblox Studio and open up the game you want to add InterfaceService to. Open up the Toolbox ( View > Toolbox ), then in the Toolbox window click the Inventory button (1) then click on the InterfaceService ModuleScript (2) . A ModuleScript called Module should now be in \u200b\u200b\u2009\u2009\u2009\u2009\u2009\u2009 game.Workspace . Rename it to InterfaceService and parent it to \u200b\u2009\u2009\u2009\u2009\u2009\u2009 game.ReplicatedStorage . To use InterfaceService in a local script you require it as shown below: local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" ))","title":"Home"},{"location":"index.html#home","text":"InterfaceService is a stand-alone ModuleScript that helps you script interactions with GUI Instances in a better, more efficient way! You can detect an interaction (such as left click) on multiple GUI Instances which is achievable without InterfaceService but it requires you to write out a for loop for every GUI Interaction you want, and if your script creates a new GUI Instance after the for loop then the Instance would be omitted from the loop as it did not exist at the time the loop was executed. InterfaceService aims to solve these problems.","title":"Home"},{"location":"index.html#example","text":"local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- function that fires whenever a GUI Instance with the ClassName of \"TextButton\" is left clicked local leftClick = interfaceService : Get ( \".TextButton\" ): LeftClick ( function ( this ) print ( this . Name .. \" was clicked!\" ) end ) -- creates a new TextButton newButton = interfaceService : Create ({ ClassName = \"TextButton\" , Size = UDim2 . new ( 0 , 100 , 0 , 100 ), Position = UDim2 . new ( 0.5 , 0 , 0.5 , 0 ), AnchorPoint = Vector2 . new ( 0.5 , 0.5 ), Parent = script . Parent }) -- has to update the leftClick function so \"newButton\" can be detected leftClick : Update ()","title":"Example"},{"location":"index.html#setup","text":"Add the ModuleScript to your Roblox inventory by clicking on the link here . Go into Roblox Studio and open up the game you want to add InterfaceService to. Open up the Toolbox ( View > Toolbox ), then in the Toolbox window click the Inventory button (1) then click on the InterfaceService ModuleScript (2) . A ModuleScript called Module should now be in \u200b\u200b\u2009\u2009\u2009\u2009\u2009\u2009 game.Workspace . Rename it to InterfaceService and parent it to \u200b\u2009\u2009\u2009\u2009\u2009\u2009 game.ReplicatedStorage . To use InterfaceService in a local script you require it as shown below: local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" ))","title":"Setup"},{"location":"docs/1_Create.html","text":":Create() \u00b6 :Create(table) is a function that needs one arguement (table). The table needs to contain properties (such as Position and AnchorPoint) that will be applied to the GUI Instance, ClassName is required. Arguements \u00b6 Arguement Description table A table that contains properies (and optionally Id) to apply to the GUI Instance, ClassName is required. Returned \u00b6 Name Value Instance The Instance created Example \u00b6 local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) button = interfaceService : Create ({ ClassName = \"TextButton\" , Id = \"button\" , Size = UDim2 . new ( 0 , 100 , 0 , 100 ), Position = UDim2 . new ( 0.5 , 0 , 0.5 , 0 ), AnchorPoint = Vector2 . new ( 0.5 , 0.5 ), Parent = script . Parent })","title":":Create()"},{"location":"docs/1_Create.html#create","text":":Create(table) is a function that needs one arguement (table). The table needs to contain properties (such as Position and AnchorPoint) that will be applied to the GUI Instance, ClassName is required.","title":":Create()"},{"location":"docs/1_Create.html#arguements","text":"Arguement Description table A table that contains properies (and optionally Id) to apply to the GUI Instance, ClassName is required.","title":"Arguements"},{"location":"docs/1_Create.html#returned","text":"Name Value Instance The Instance created","title":"Returned"},{"location":"docs/1_Create.html#example","text":"local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) button = interfaceService : Create ({ ClassName = \"TextButton\" , Id = \"button\" , Size = UDim2 . new ( 0 , 100 , 0 , 100 ), Position = UDim2 . new ( 0.5 , 0 , 0.5 , 0 ), AnchorPoint = Vector2 . new ( 0.5 , 0.5 ), Parent = script . Parent })","title":"Example"},{"location":"docs/2_Get.html","text":":Get() \u00b6 :Get(selector, ancestor <optional>) is a function that requires at least one arguement (selector), it also returns information in the form of a dictionary. This function gets a list of matching elements based on a selector and an (optional) ancestor. :MouseEnter() , :Mouseleave() , :LeftClick() , :RightClick() , :MouseClick() and :Changed() can be used on :Get() Arguements \u00b6 Arguement Description selector A String (ClassName, Name or Id) or an Instance that defines the type of GUI Instance ancestor An optional variable that defines the ancestor that all of the GUI Instances have to be a descendant of in order for it to be included in the matchingElements table of the dictionary returned by :Get() . If the selector arguement is an Instance then ancestor arguement is ignored. ClassName - To indicate that the selector arguement is a ClassName the string should preceed with a . - for example, \".TextButton\". Abbreviations can be used instead of ClassNames, they are: .button - This is an abbreviation for TextButton's and ImageButton's .label - This is an abbreviation for TextLabel's and ImageLabel's .frame - This is an abbreviation for Frame's and ScrollingFrame's Id - To indicate that the selector arguement is a ClassName the string should preceed with a # - for example, \"#CloseMenuButton\". The Id of a GUI Instance is a string attribute of the Instance called \"id\". Name - The selector arguement should just be a string that contains the name of the GUI Instances to look for - for example \"InventoryButton\" Dictionary Returned \u00b6 Dictionary Key Returned Dictionary Value Returned elementType The type of GUI Instance (ClassName, Name, Id, Instance) matchingElements A table of instances that match the selector (and parent if it is defined) originalData A string that contains the selector used Examples \u00b6 local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- prints all of the GUI Instances that have the ClassName of \"TextButton\" and the same parent as this script for i , v in next , interfaceService : Get ( \".TextButton\" , script . Parent ). matchingElements do print ( v ) end local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- prints all of the GUI Instances that have the ClassName of \"TextLabel\" or \"ImageLabel\" for i , v in next , interfaceService : Get ( \".label\" ). matchingElements do print ( v ) end local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- prints all of the GUI Instances that have the Id of \"CloseMenuButton\" for i , v in next , interfaceService : Get ( \"#CloseMenuButton\" ). matchingElements do print ( v ) end local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- prints all of the GUI Instances that have the Name of \"InventoryButton\" for i , v in next , interfaceService : Get ( \"InventoryButton\" ). matchingElements do print ( v ) end local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) local button = script . Parent : WaitForChild ( \"button\" ) -- prints the button Instance for i , v in next , interfaceService : Get ( button ). matchingElements do print ( v ) end","title":":Get()"},{"location":"docs/2_Get.html#get","text":":Get(selector, ancestor <optional>) is a function that requires at least one arguement (selector), it also returns information in the form of a dictionary. This function gets a list of matching elements based on a selector and an (optional) ancestor. :MouseEnter() , :Mouseleave() , :LeftClick() , :RightClick() , :MouseClick() and :Changed() can be used on :Get()","title":":Get()"},{"location":"docs/2_Get.html#arguements","text":"Arguement Description selector A String (ClassName, Name or Id) or an Instance that defines the type of GUI Instance ancestor An optional variable that defines the ancestor that all of the GUI Instances have to be a descendant of in order for it to be included in the matchingElements table of the dictionary returned by :Get() . If the selector arguement is an Instance then ancestor arguement is ignored. ClassName - To indicate that the selector arguement is a ClassName the string should preceed with a . - for example, \".TextButton\". Abbreviations can be used instead of ClassNames, they are: .button - This is an abbreviation for TextButton's and ImageButton's .label - This is an abbreviation for TextLabel's and ImageLabel's .frame - This is an abbreviation for Frame's and ScrollingFrame's Id - To indicate that the selector arguement is a ClassName the string should preceed with a # - for example, \"#CloseMenuButton\". The Id of a GUI Instance is a string attribute of the Instance called \"id\". Name - The selector arguement should just be a string that contains the name of the GUI Instances to look for - for example \"InventoryButton\"","title":"Arguements"},{"location":"docs/2_Get.html#dictionary-returned","text":"Dictionary Key Returned Dictionary Value Returned elementType The type of GUI Instance (ClassName, Name, Id, Instance) matchingElements A table of instances that match the selector (and parent if it is defined) originalData A string that contains the selector used","title":"Dictionary Returned"},{"location":"docs/2_Get.html#examples","text":"local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- prints all of the GUI Instances that have the ClassName of \"TextButton\" and the same parent as this script for i , v in next , interfaceService : Get ( \".TextButton\" , script . Parent ). matchingElements do print ( v ) end local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- prints all of the GUI Instances that have the ClassName of \"TextLabel\" or \"ImageLabel\" for i , v in next , interfaceService : Get ( \".label\" ). matchingElements do print ( v ) end local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- prints all of the GUI Instances that have the Id of \"CloseMenuButton\" for i , v in next , interfaceService : Get ( \"#CloseMenuButton\" ). matchingElements do print ( v ) end local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- prints all of the GUI Instances that have the Name of \"InventoryButton\" for i , v in next , interfaceService : Get ( \"InventoryButton\" ). matchingElements do print ( v ) end local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) local button = script . Parent : WaitForChild ( \"button\" ) -- prints the button Instance for i , v in next , interfaceService : Get ( button ). matchingElements do print ( v ) end","title":"Examples"},{"location":"docs/3_Update.html","text":":Update() \u00b6 :Get(selector <optional>, ancestor <optional>) is a function that has 2 optional arguements. This function updates the selector and or the ancestor of :MouseEnter() , :Mouseleave() , :LeftClick() , :RightClick() , :MouseClick() and :Changed() . Leaving both arguements blank will result in the matchingElements table of the dictionary returned by :Get() . :Update() can only be used on :MouseEnter() , :Mouseleave() , :LeftClick() , :RightClick() , :MouseClick() and :Changed() . Arguements \u00b6 Arguement Description selector A String (ClassName, Name or Id) or an Instance that defines the type of GUI Instance ancestor An optional variable that defines the ancestor that all of the GUI Instances have to be a descendant of in order for it to be included in the matchingElements dictionary returned by :Get() . If the selector arguement is an Instance then ancestor arguement is ignored. defaults to the ancestor defined in the dictionary returned by :Get() . ClassName - To indicate that the selector arguement is a ClassName the string should preceed with a . - for example, \".TextButton\". Abbreviations can be used instead of ClassNames, they are: .button - This is an abbreviation for TextButton's and ImageButton's .label - This is an abbreviation for TextLabel's and ImageLabel's .frame - This is an abbreviation for Frame's and ScrollingFrame's Id - To indicate that the selector arguement is a ClassName the string should preceed with a # - for example, \"#CloseMenuButton\". The Id of a GUI Instance is a string attribute of the Instance called \"id\". Name - The selector arguement should just be a string that contains the name of the GUI Instances to look for - for example \"InventoryButton\" Examples \u00b6 local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- function that triggers when the button is clicked leftClick = interfaceService : Get ( \".TextButton\" ): LeftClick ( function ( this ) print ( this . Name .. \" Was Left Clicked\" ) end ) --[[ updates the function so that any GUI Instance that has the ClassName \"ImageButton\" (and has the same parent as this script) triggers the function when it is left clicked ]] -- leftClick : Update ( \".ImageButton\" , script . Parent ) local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) local button = script . Parent : WaitForChild ( \"TextButton\" ) -- function that triggers when the button is clicked rightClick = interfaceService : Get ( button ): RightClick ( function ( this ) print ( this . Name .. \" Was Right Clicked\" ) end ) -- creates a new TextButton newButton = interfaceService : Create ({ ClassName = \"TextButton\" , Size = UDim2 . new ( 0 , 100 , 0 , 100 ), Position = UDim2 . new ( 0.5 , 0 , 0.5 , 0 ), AnchorPoint = Vector2 . new ( 0.5 , 0.5 ), Parent = script . Parent }) --updates the function so that \"newButton\" triggers the function instead of \"button\" rightClick : Update ( newButton ) local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- function that fires whenever a GUI Instance with the ClassName of \"TextButton\" is left clicked local leftClick = interfaceService : Get ( \".TextButton\" ): LeftClick ( function ( this ) print ( this . Name .. \" was clicked!\" ) end ) -- creates a new TextButton newButton = interfaceService : Create ({ ClassName = \"TextButton\" , Id = \"TextButtonId\" , Size = UDim2 . new ( 0 , 100 , 0 , 100 ), Position = UDim2 . new ( 0.5 , 0 , 0.5 , 0 ), AnchorPoint = Vector2 . new ( 0.5 , 0.5 ), Parent = script . Parent }) -- has to update the leftClick function so \"newButton\" can be detected leftClick : Update ()","title":":Update()"},{"location":"docs/3_Update.html#update","text":":Get(selector <optional>, ancestor <optional>) is a function that has 2 optional arguements. This function updates the selector and or the ancestor of :MouseEnter() , :Mouseleave() , :LeftClick() , :RightClick() , :MouseClick() and :Changed() . Leaving both arguements blank will result in the matchingElements table of the dictionary returned by :Get() . :Update() can only be used on :MouseEnter() , :Mouseleave() , :LeftClick() , :RightClick() , :MouseClick() and :Changed() .","title":":Update()"},{"location":"docs/3_Update.html#arguements","text":"Arguement Description selector A String (ClassName, Name or Id) or an Instance that defines the type of GUI Instance ancestor An optional variable that defines the ancestor that all of the GUI Instances have to be a descendant of in order for it to be included in the matchingElements dictionary returned by :Get() . If the selector arguement is an Instance then ancestor arguement is ignored. defaults to the ancestor defined in the dictionary returned by :Get() . ClassName - To indicate that the selector arguement is a ClassName the string should preceed with a . - for example, \".TextButton\". Abbreviations can be used instead of ClassNames, they are: .button - This is an abbreviation for TextButton's and ImageButton's .label - This is an abbreviation for TextLabel's and ImageLabel's .frame - This is an abbreviation for Frame's and ScrollingFrame's Id - To indicate that the selector arguement is a ClassName the string should preceed with a # - for example, \"#CloseMenuButton\". The Id of a GUI Instance is a string attribute of the Instance called \"id\". Name - The selector arguement should just be a string that contains the name of the GUI Instances to look for - for example \"InventoryButton\"","title":"Arguements"},{"location":"docs/3_Update.html#examples","text":"local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- function that triggers when the button is clicked leftClick = interfaceService : Get ( \".TextButton\" ): LeftClick ( function ( this ) print ( this . Name .. \" Was Left Clicked\" ) end ) --[[ updates the function so that any GUI Instance that has the ClassName \"ImageButton\" (and has the same parent as this script) triggers the function when it is left clicked ]] -- leftClick : Update ( \".ImageButton\" , script . Parent ) local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) local button = script . Parent : WaitForChild ( \"TextButton\" ) -- function that triggers when the button is clicked rightClick = interfaceService : Get ( button ): RightClick ( function ( this ) print ( this . Name .. \" Was Right Clicked\" ) end ) -- creates a new TextButton newButton = interfaceService : Create ({ ClassName = \"TextButton\" , Size = UDim2 . new ( 0 , 100 , 0 , 100 ), Position = UDim2 . new ( 0.5 , 0 , 0.5 , 0 ), AnchorPoint = Vector2 . new ( 0.5 , 0.5 ), Parent = script . Parent }) --updates the function so that \"newButton\" triggers the function instead of \"button\" rightClick : Update ( newButton ) local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- function that fires whenever a GUI Instance with the ClassName of \"TextButton\" is left clicked local leftClick = interfaceService : Get ( \".TextButton\" ): LeftClick ( function ( this ) print ( this . Name .. \" was clicked!\" ) end ) -- creates a new TextButton newButton = interfaceService : Create ({ ClassName = \"TextButton\" , Id = \"TextButtonId\" , Size = UDim2 . new ( 0 , 100 , 0 , 100 ), Position = UDim2 . new ( 0.5 , 0 , 0.5 , 0 ), AnchorPoint = Vector2 . new ( 0.5 , 0.5 ), Parent = script . Parent }) -- has to update the leftClick function so \"newButton\" can be detected leftClick : Update ()","title":"Examples"},{"location":"docs/4_MouseEnter.html","text":":MouseEnter() \u00b6 :MouseEnter(func) is a function that needs one arguement (func), which is a function. The function can only be used on the dictionary returned by :Get() . :MouseEnter() can only be used on :Get() Arguements \u00b6 Arguement Description function The function that will be carried out when the mouse enters any GUI Instance inside of the matchingElements table of the dictionary returned by :Get() . The function has one (optional) arguement, which is for the specific GUI Instance that was interacted with. Example \u00b6 local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- \"this\" is an arbitrary name for the specific GUI Instance that was interacted with interfaceService : Get ( \".TextButton\" ): MouseEnter ( function ( this ) print ( \"Mouse Entered \" .. this . Name ) end )","title":":MouseEnter()"},{"location":"docs/4_MouseEnter.html#mouseenter","text":":MouseEnter(func) is a function that needs one arguement (func), which is a function. The function can only be used on the dictionary returned by :Get() . :MouseEnter() can only be used on :Get()","title":":MouseEnter()"},{"location":"docs/4_MouseEnter.html#arguements","text":"Arguement Description function The function that will be carried out when the mouse enters any GUI Instance inside of the matchingElements table of the dictionary returned by :Get() . The function has one (optional) arguement, which is for the specific GUI Instance that was interacted with.","title":"Arguements"},{"location":"docs/4_MouseEnter.html#example","text":"local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- \"this\" is an arbitrary name for the specific GUI Instance that was interacted with interfaceService : Get ( \".TextButton\" ): MouseEnter ( function ( this ) print ( \"Mouse Entered \" .. this . Name ) end )","title":"Example"},{"location":"docs/5_MouseLeave.html","text":":MouseLeave() \u00b6 :MouseLeave(func) is a function that needs one arguement (func), which is a function. The function can only be used on the dictionary returned by :Get() . :MouseLeave() can only be used on :Get() Arguements \u00b6 Arguement Description function The function that will be carried out when the mouse leaves any GUI Instance inside of the matchingElements table of the dictionary returned by :Get() . The function has one (optional) arguement, which is for the specific GUI Instance that was interacted with. Example \u00b6 local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- \"this\" is an arbitrary name for the specific GUI Instance that was interacted with interfaceService : Get ( \".frames\" ): MouseLeave ( function ( this ) print ( \"Mouse Left \" .. this . Name ) end )","title":":MouseLeave()"},{"location":"docs/5_MouseLeave.html#mouseleave","text":":MouseLeave(func) is a function that needs one arguement (func), which is a function. The function can only be used on the dictionary returned by :Get() . :MouseLeave() can only be used on :Get()","title":":MouseLeave()"},{"location":"docs/5_MouseLeave.html#arguements","text":"Arguement Description function The function that will be carried out when the mouse leaves any GUI Instance inside of the matchingElements table of the dictionary returned by :Get() . The function has one (optional) arguement, which is for the specific GUI Instance that was interacted with.","title":"Arguements"},{"location":"docs/5_MouseLeave.html#example","text":"local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- \"this\" is an arbitrary name for the specific GUI Instance that was interacted with interfaceService : Get ( \".frames\" ): MouseLeave ( function ( this ) print ( \"Mouse Left \" .. this . Name ) end )","title":"Example"},{"location":"docs/6_LeftClick.html","text":":LeftClick() \u00b6 :LeftClick(func) is a function that needs one arguement (func), which is a function. The function can only be used on the dictionary returned by :Get() . :LeftClick() can only be used on :Get() Arguements \u00b6 Arguement Description function The function that will be carried out when the mouse left clicks any GUI Instance inside of the matchingElements table of the dictionary returned by :Get() . The function has one (optional) arguement, which is for the specific GUI Instance that was interacted with. Example \u00b6 local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- \"this\" is an arbitrary name for the specific GUI Instance that was interacted with interfaceService : Get ( \"#cookieButton\" ): LeftClick ( function ( this ) print ( \"Mouse Left Clicked \" .. this . Name ) end )","title":":LeftClick()"},{"location":"docs/6_LeftClick.html#leftclick","text":":LeftClick(func) is a function that needs one arguement (func), which is a function. The function can only be used on the dictionary returned by :Get() . :LeftClick() can only be used on :Get()","title":":LeftClick()"},{"location":"docs/6_LeftClick.html#arguements","text":"Arguement Description function The function that will be carried out when the mouse left clicks any GUI Instance inside of the matchingElements table of the dictionary returned by :Get() . The function has one (optional) arguement, which is for the specific GUI Instance that was interacted with.","title":"Arguements"},{"location":"docs/6_LeftClick.html#example","text":"local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- \"this\" is an arbitrary name for the specific GUI Instance that was interacted with interfaceService : Get ( \"#cookieButton\" ): LeftClick ( function ( this ) print ( \"Mouse Left Clicked \" .. this . Name ) end )","title":"Example"},{"location":"docs/7_RightClick.html","text":":RightClick() \u00b6 :RightClick(func) is a function that needs one arguement (func), which is a function. The function can only be used on the dictionary returned by :Get() . :RightClick() can only be used on :Get() Arguements \u00b6 Arguement Description function The function that will be carried out when the mouse right clicks any GUI Instance inside of the matchingElements table of the dictionary returned by :Get() . The function has one (optional) arguement, which is for the specific GUI Instance that was interacted with. Example \u00b6 local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- \"this\" is an arbitrary name for the specific GUI Instance that was interacted with interfaceService : Get ( \"OpenInventoryButton\" ): RightClick ( function ( this ) print ( \"Mouse Right Clicked \" .. this . Name ) end )","title":":RightClick()"},{"location":"docs/7_RightClick.html#rightclick","text":":RightClick(func) is a function that needs one arguement (func), which is a function. The function can only be used on the dictionary returned by :Get() . :RightClick() can only be used on :Get()","title":":RightClick()"},{"location":"docs/7_RightClick.html#arguements","text":"Arguement Description function The function that will be carried out when the mouse right clicks any GUI Instance inside of the matchingElements table of the dictionary returned by :Get() . The function has one (optional) arguement, which is for the specific GUI Instance that was interacted with.","title":"Arguements"},{"location":"docs/7_RightClick.html#example","text":"local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- \"this\" is an arbitrary name for the specific GUI Instance that was interacted with interfaceService : Get ( \"OpenInventoryButton\" ): RightClick ( function ( this ) print ( \"Mouse Right Clicked \" .. this . Name ) end )","title":"Example"},{"location":"docs/8_MouseClick.html","text":":MouseClick() \u00b6 :MouseClick(func) is a function that needs one arguement (func), which is a function. The function can only be used on the dictionary returned by :Get() . :MouseClick() can only be used on :Get() Arguements \u00b6 Arguement Description function The function that will be carried out when the mouse left clicks or right clicks any GUI Instance inside of the matchingElements table of the dictionary returned by :Get() . The function has one (optional) arguement, which is for the specific GUI Instance that was interacted with. Example \u00b6 local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- \"this\" is an arbitrary name for the specific GUI Instance that was interacted with interfaceService : Get ( \"OpenInventoryButton\" ): MouseClick ( function ( this ) print ( \"Mouse Left Clicked Or Right Clicked \" .. this . Name ) end )","title":":MouseClick()"},{"location":"docs/8_MouseClick.html#mouseclick","text":":MouseClick(func) is a function that needs one arguement (func), which is a function. The function can only be used on the dictionary returned by :Get() . :MouseClick() can only be used on :Get()","title":":MouseClick()"},{"location":"docs/8_MouseClick.html#arguements","text":"Arguement Description function The function that will be carried out when the mouse left clicks or right clicks any GUI Instance inside of the matchingElements table of the dictionary returned by :Get() . The function has one (optional) arguement, which is for the specific GUI Instance that was interacted with.","title":"Arguements"},{"location":"docs/8_MouseClick.html#example","text":"local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- \"this\" is an arbitrary name for the specific GUI Instance that was interacted with interfaceService : Get ( \"OpenInventoryButton\" ): MouseClick ( function ( this ) print ( \"Mouse Left Clicked Or Right Clicked \" .. this . Name ) end )","title":"Example"},{"location":"docs/90_Changed.html","text":":Changed() \u00b6 :Changed(func) is a function that needs one arguement (func), which is a function. The function can only be used on the dictionary returned by :Get() . :Changed() can only be used on :Get() Arguements \u00b6 Arguement Description function The function that will be carried out when any GUI Instance inside of the matchingElements table of the dictionary returned by :Get() changes. The function has one (optional) arguement, which is for the specific GUI Instance that was interacted with. Example \u00b6 local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- \"this\" is an arbitrary name for the specific GUI Instance that was interacted with interfaceService : Get ( \".frame\" ): Changed ( function ( this ) print ( this . Name .. \" Has Changed\" ) end )","title":":Changed()"},{"location":"docs/90_Changed.html#changed","text":":Changed(func) is a function that needs one arguement (func), which is a function. The function can only be used on the dictionary returned by :Get() . :Changed() can only be used on :Get()","title":":Changed()"},{"location":"docs/90_Changed.html#arguements","text":"Arguement Description function The function that will be carried out when any GUI Instance inside of the matchingElements table of the dictionary returned by :Get() changes. The function has one (optional) arguement, which is for the specific GUI Instance that was interacted with.","title":"Arguements"},{"location":"docs/90_Changed.html#example","text":"local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- \"this\" is an arbitrary name for the specific GUI Instance that was interacted with interfaceService : Get ( \".frame\" ): Changed ( function ( this ) print ( this . Name .. \" Has Changed\" ) end )","title":"Example"},{"location":"docs/91_SetId.html","text":":SetId() \u00b6 :SetId(element, id) is a function that has 2 required arguements. This function updates the Id of a GUI Instance. The Id of a GUI Instance is an string attribute called \"id\" Arguements \u00b6 Arguement Description element The GUI Instance to apply the Id onto. id The Id (string). Examples \u00b6 Do not include the indicator symbol for Id ( # ) when setting the Id, or when setting it manually in the properties window! local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) interfaceService : SetId ( script . Parent : WaitForChild ( \"MenuFrame\" ), \"menuFrame\" ) local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- function that triggers when the button is clicked local leftClick = interfaceService : Get ( \"#buttons\" ): LeftClick ( function ( this ) print ( this . Name .. \" Was Left Clicked\" ) end ) -- creates a new TextButton newButton = interfaceService : Create ({ ClassName = \"TextButton\" , Size = UDim2 . new ( 0 , 100 , 0 , 100 ), Position = UDim2 . new ( 0.5 , 0 , 0.5 , 0 ), AnchorPoint = Vector2 . new ( 0.5 , 0.5 ), Parent = script . Parent }) -- sets the id of the newButton to \"buttons\" interfaceService : SetId ( newButton , \"buttons\" ) -- updates the leftClick function so \"newbutton\" can be detected leftClick : Update ()","title":":SetId()"},{"location":"docs/91_SetId.html#setid","text":":SetId(element, id) is a function that has 2 required arguements. This function updates the Id of a GUI Instance. The Id of a GUI Instance is an string attribute called \"id\"","title":":SetId()"},{"location":"docs/91_SetId.html#arguements","text":"Arguement Description element The GUI Instance to apply the Id onto. id The Id (string).","title":"Arguements"},{"location":"docs/91_SetId.html#examples","text":"Do not include the indicator symbol for Id ( # ) when setting the Id, or when setting it manually in the properties window! local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) interfaceService : SetId ( script . Parent : WaitForChild ( \"MenuFrame\" ), \"menuFrame\" ) local interfaceService = require ( game . ReplicatedStorage : WaitForChild ( \"InterfaceService\" )) -- function that triggers when the button is clicked local leftClick = interfaceService : Get ( \"#buttons\" ): LeftClick ( function ( this ) print ( this . Name .. \" Was Left Clicked\" ) end ) -- creates a new TextButton newButton = interfaceService : Create ({ ClassName = \"TextButton\" , Size = UDim2 . new ( 0 , 100 , 0 , 100 ), Position = UDim2 . new ( 0.5 , 0 , 0.5 , 0 ), AnchorPoint = Vector2 . new ( 0.5 , 0.5 ), Parent = script . Parent }) -- sets the id of the newButton to \"buttons\" interfaceService : SetId ( newButton , \"buttons\" ) -- updates the leftClick function so \"newbutton\" can be detected leftClick : Update ()","title":"Examples"}]}